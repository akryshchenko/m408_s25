[
  {
    "objectID": "ec.html",
    "href": "ec.html",
    "title": "Lectures",
    "section": "",
    "text": "*apply Functions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nControl Flow 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nControl Flow 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nControl Flow 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Manipulation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntro to Data Manipulation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Statistical Learning\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR Basics\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "lectures/4bS25.html#learning-objectives",
    "href": "lectures/4bS25.html#learning-objectives",
    "title": "Intro to Data Manipulation",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nAnonymous Functions\nPipes\nScripting\nData Manipulation"
  },
  {
    "objectID": "lectures/4bS25.html#anonymous-functions-1",
    "href": "lectures/4bS25.html#anonymous-functions-1",
    "title": "Intro to Data Manipulation",
    "section": "Anonymous Functions",
    "text": "Anonymous Functions\nAn anonymous function is a function that is not stored in an R object for the global environment. It can be thought of as a temporary function to complete a task. A common way to used an anonymous function is with an *apply() function\n\n\nx &lt;- 1:10\nsapply(x, function(x) rnorm(1,x))\n\n#&gt;  [1] 1.931789 2.260730 3.768863 5.311368 5.356041 6.243789 8.421921 7.223699\n#&gt;  [9] 9.170748 8.869286\n\n\n\nx &lt;- 1:10\nsapply(x, \\(x) rnorm(1,1,x))\n\n#&gt;  [1]   1.8654537   0.6258840   0.8400019  -5.0311888  -9.2392400  -3.7883336\n#&gt;  [7]   4.3708018  -0.4831149 -15.6531230  -5.5963676"
  },
  {
    "objectID": "lectures/4bS25.html#example",
    "href": "lectures/4bS25.html#example",
    "title": "Intro to Data Manipulation",
    "section": "Example",
    "text": "Example\nUse an anonymous function to square all the values in the following vector:\n\n# Use an anonymous function to calculate the square of each element in a vector\nnumbers &lt;- 1:40"
  },
  {
    "objectID": "lectures/4bS25.html#example-1",
    "href": "lectures/4bS25.html#example-1",
    "title": "Intro to Data Manipulation",
    "section": "Example",
    "text": "Example\nUse an anonymous function to convert the vector from Fahrenheit to Celsius:\n\n# Create a vector of temperatures in Fahrenheit\ntemperatures_f &lt;- c(32, 68, 104, 50)\n\n\\[\nC = \\frac{5(F-32)}{9}\n\\]"
  },
  {
    "objectID": "lectures/4bS25.html#pipes-1",
    "href": "lectures/4bS25.html#pipes-1",
    "title": "Intro to Data Manipulation",
    "section": "Pipes",
    "text": "Pipes\nPipes are used to pass the output from one function and use it as input for another function. The output is piped into the first argument of the next function. There are two main pipes: R’s base pipe and Magrittr’s pipes. You must download and install the magrittr package; and you will need to load it everytime:\n\nlibrary(magrittr)\n\nAdditionally, pipes can be used to chain functions together."
  },
  {
    "objectID": "lectures/4bS25.html#section",
    "href": "lectures/4bS25.html#section",
    "title": "Intro to Data Manipulation",
    "section": "|>",
    "text": "|&gt;\nBefore R 4.1, R did not have a pipe in its main program. The base pipe, |&gt;, will pipe the output of the first operation and use it as the input of the first argument of the next function.\n\nx &lt;- 1:40\nx |&gt; mean()\n\n#&gt; [1] 20.5"
  },
  {
    "objectID": "lectures/4bS25.html#section-1",
    "href": "lectures/4bS25.html#section-1",
    "title": "Intro to Data Manipulation",
    "section": "%>%",
    "text": "%&gt;%\nThe magrittr pipe, %&gt;%, operates the same way as |&gt;. Below are a couple of examples\n\nx &lt;- 1:10\nx %&gt;%  mean()\n\n#&gt; [1] 5.5\n\nx %&gt;% sd\n\n#&gt; [1] 3.02765\n\nx %&gt;% rnorm(1, .)\n\n#&gt; [1] -0.1203672"
  },
  {
    "objectID": "lectures/4bS25.html#section-2",
    "href": "lectures/4bS25.html#section-2",
    "title": "Intro to Data Manipulation",
    "section": "%$%",
    "text": "%$%\nThe exposition pipe, %$%, will expose the named elements, from a list or data frame, to the next function.\n\nmtcars %$% plot(mpg, hp)"
  },
  {
    "objectID": "lectures/4bS25.html#t",
    "href": "lectures/4bS25.html#t",
    "title": "Intro to Data Manipulation",
    "section": "%T>%",
    "text": "%T&gt;%\nThe Tee pipe, %T&gt;%, forward the output in the\n\nsin_40 &lt;- 1:40 %&gt;% mean %T&gt;% print %&gt;% sin\n\n#&gt; [1] 20.5\n\nprint(sin_40)\n\n#&gt; [1] 0.9968298"
  },
  {
    "objectID": "lectures/4bS25.html#t-1",
    "href": "lectures/4bS25.html#t-1",
    "title": "Intro to Data Manipulation",
    "section": "%T>%",
    "text": "%T&gt;%\n\nrnorm(100) %&gt;% \n  matrix(ncol=2) %&gt;% \n  sin() %T&gt;% \n  plot() %&gt;% \n  colSums()"
  },
  {
    "objectID": "lectures/4bS25.html#examples",
    "href": "lectures/4bS25.html#examples",
    "title": "Intro to Data Manipulation",
    "section": "Examples",
    "text": "Examples\nUsing the vector below, find the standard deviation using a pipe:\n\nx &lt;- rgamma(100, 1)\nsd(x)"
  },
  {
    "objectID": "lectures/4bS25.html#examples-1",
    "href": "lectures/4bS25.html#examples-1",
    "title": "Intro to Data Manipulation",
    "section": "Examples",
    "text": "Examples\nChain pipe the previous results into the \\(sin(x)\\)."
  },
  {
    "objectID": "lectures/4bS25.html#examples-2",
    "href": "lectures/4bS25.html#examples-2",
    "title": "Intro to Data Manipulation",
    "section": "Examples",
    "text": "Examples\nChain pipe the previous results into \\(e^x\\)."
  },
  {
    "objectID": "lectures/4bS25.html#examples-3",
    "href": "lectures/4bS25.html#examples-3",
    "title": "Intro to Data Manipulation",
    "section": "Examples",
    "text": "Examples\nChain pipe the previous results into \\(x^2+5x+4\\)"
  },
  {
    "objectID": "lectures/4bS25.html#scripting",
    "href": "lectures/4bS25.html#scripting",
    "title": "Intro to Data Manipulation",
    "section": "Scripting",
    "text": "Scripting\nThe structure a programming is important to ensure that all methods are executed properly."
  },
  {
    "objectID": "lectures/4bS25.html#beginning-of-script",
    "href": "lectures/4bS25.html#beginning-of-script",
    "title": "Intro to Data Manipulation",
    "section": "Beginning of Script",
    "text": "Beginning of Script\n\n## Todays data \nanalysis_data &lt;- format(Sys.time(),\"%Y-%m-%d-%H-%M\")\n\n## R Packages\nlibrary(tidyverse)\nlibrary(magrittr)\n\n## Functions\nsource(\"fxs.R\")\nRcpp::sourceCpp(\"fxs.cpp\")\n\n## Data\ndf1 &lt;- read_csv(\"file.csv\")\ndf2 &lt;- load(\"file.RData\") %&gt;% get"
  },
  {
    "objectID": "lectures/4bS25.html#middle-of-script",
    "href": "lectures/4bS25.html#middle-of-script",
    "title": "Intro to Data Manipulation",
    "section": "Middle of Script",
    "text": "Middle of Script\n\n## Pre Analysis\ndf1_prep &lt;- Prep_data(df1)\ndf2_prep &lt;- Prep_data(df2)\n\n## Analysis\ndf1_analysis &lt;- analyze(df1_prep)\ndf2_analysis &lt;- analyze(df2_prep)\n\n## Post Analysis\ndf1_post &lt;- Prep_post(df1_anlysis)\ndf2_post &lt;- Prep_post(df2_anlysis)"
  },
  {
    "objectID": "lectures/4bS25.html#end-of-script",
    "href": "lectures/4bS25.html#end-of-script",
    "title": "Intro to Data Manipulation",
    "section": "End of Script",
    "text": "End of Script\n\n## Save Results\nres &lt;- list(df1 = list(pre = df1_prep,\n                       analysis = df1_analysis,\n                       post = df1_post),\n            df2 = list(pre = df2_prep,\n                       analysis = df2_analysis,\n                       post = df2_post))\nfile_name &lt;- paste0(\"results_\", analysis_data, \".RData\")\nsave(res, file = file_name)"
  },
  {
    "objectID": "lectures/4bS25.html#keyboard-shortcuts",
    "href": "lectures/4bS25.html#keyboard-shortcuts",
    "title": "Intro to Data Manipulation",
    "section": "Keyboard Shortcuts",
    "text": "Keyboard Shortcuts\nBelow is a list of recommended keyboard shortcuts:\n\n\n\nShortcut\nWindows/Linux\nMac\n\n\n\n\n%&gt;%\nCtrl+Shift+M\nCmd+Shift+M\n\n\nRun Current Line\nCtrl+Enter\nCmd+Return\n\n\nRun Current Chunk\nCtrl+Shift+Enter\nCmd+Shift+Enter\n\n\nKnit Document\nCtrl+Shift+K\nCmd+Shift+K\n\n\nAdd Cursor Below\nCtrl+Alt+Down\nCmd+Alt+Down\n\n\nComment Line\nCtrl+Shift+C\nCmd+Shift+C\n\n\n\nI recommend modify these keyboard shortcuts in RStudio\n\n\n\nShortcut\nWindows/Linux\nMac\n\n\n\n\n%in%\nCtrl+Shift+I\nCmd+Shift+I\n\n\n%$%\nCtrl+Shift+D\nCmd+Shift+D\n\n\n%T&gt;%\nCtrl+Shift+T\nCmd+Shift+T\n\n\n\nNote you will need to install the extraInserts package:\n\nremotes::install_github('konradzdeb/extraInserts')"
  },
  {
    "objectID": "lectures/4bS25.html#data-manipulation-1",
    "href": "lectures/4bS25.html#data-manipulation-1",
    "title": "Intro to Data Manipulation",
    "section": "Data Manipulation",
    "text": "Data Manipulation"
  },
  {
    "objectID": "lectures/4bS25.html#tidyverse",
    "href": "lectures/4bS25.html#tidyverse",
    "title": "Intro to Data Manipulation",
    "section": "Tidyverse",
    "text": "Tidyverse\nTidyverse is a collection of R packages used for data manipulation. The dplyr package is known as the grammar of data manipulation with a set"
  },
  {
    "objectID": "lectures/4bS25.html#verbs",
    "href": "lectures/4bS25.html#verbs",
    "title": "Intro to Data Manipulation",
    "section": "Verbs",
    "text": "Verbs\n\nmutate() adds new variables\nselect() selects variables\nfilter() filters data\nif_else() conditional function that returns 2 values\ngroup_by() a dataset is grouped by factors\nsummarise() provides summaries of data"
  },
  {
    "objectID": "lectures/4bS25.html#example-2",
    "href": "lectures/4bS25.html#example-2",
    "title": "Intro to Data Manipulation",
    "section": "Example",
    "text": "Example\n\nlibrary(palmerpenguins)\nsum_stats &lt;- penguins %&gt;% \n  drop_na %&gt;% \n  filter(year==2007) %&gt;% \n  group_by(island) %&gt;% \n  summarise(mean = mean(bill_length_mm),\n            sd = sd(bill_length_mm),\n            median = median(bill_length_mm),\n            n = length(bill_length_mm)) %&gt;% \n  print\n\n#&gt; # A tibble: 3 × 5\n#&gt;   island     mean    sd median     n\n#&gt;   &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt;\n#&gt; 1 Biscoe     45.1  4.80   46.1    43\n#&gt; 2 Dream      44.7  5.64   45.4    45\n#&gt; 3 Torgersen  39.0  2.92   39.1    15"
  },
  {
    "objectID": "lectures/3aS25.html#learning-objectives",
    "href": "lectures/3aS25.html#learning-objectives",
    "title": "Control Flow 3",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nnext Statements\nbreak Statements\nwhile Loops"
  },
  {
    "objectID": "lectures/3aS25.html#next-statements-1",
    "href": "lectures/3aS25.html#next-statements-1",
    "title": "Control Flow 3",
    "section": "next Statements",
    "text": "next Statements\nThe next statement is used to skip an iteration of a loop. This is used along an if statement.\n\nfor (i in vector){\n  perform task\n  if (condition){\n    next\n  } else {\n    perform task\n  }\n}"
  },
  {
    "objectID": "lectures/3aS25.html#break-statements-1",
    "href": "lectures/3aS25.html#break-statements-1",
    "title": "Control Flow 3",
    "section": "break Statements",
    "text": "break Statements\nThe break statement is used to stop a loop if the condition is met. This is used along with an if statement.\n\nfor (i in vector){\n  perform task\n  if (condition){\n    break\n  } else {\n    perform task\n  }\n}"
  },
  {
    "objectID": "lectures/3aS25.html#while-loops-1",
    "href": "lectures/3aS25.html#while-loops-1",
    "title": "Control Flow 3",
    "section": "while Loops",
    "text": "while Loops\nA while loop is a combination of a for loop and a break statement. The loop will continue indefinitely until a condition becomes false.\n\n# Initial Condition\ncondition &lt;- starting TRUE condition\n\nwhile (condition){\n  perform task\n  condition &lt;- update condition\n}"
  },
  {
    "objectID": "lectures/3aS25.html#example",
    "href": "lectures/3aS25.html#example",
    "title": "Control Flow 3",
    "section": "Example",
    "text": "Example\nSimulate from a \\(N(0,1)\\) distribution until you have 50 positive numbers.\n\n\nCode\nn &lt;- 0\npos_num &lt;- c()\n\nwhile (n &lt; 51){\n  x &lt;- rnorm(1)\n  if (x &gt; 0) {\n    pos_num &lt;- c(pos_num, x)\n    n &lt;- n + 1\n  }\n}\n\npos_num"
  },
  {
    "objectID": "lectures/3aS25.html#example-1",
    "href": "lectures/3aS25.html#example-1",
    "title": "Control Flow 3",
    "section": "Example",
    "text": "Example\nFind the value of \\(x\\) where the function \\(y=1/x\\) relative converges (\\(\\frac{|y_{old}-y_{new}|}{y_{old}}\\)) at a level of \\(10^-6\\) as \\(x\\rightarrow \\infty\\).\n\n\nCode\ndiff &lt;- 10\nx &lt;- 2\ny_old &lt;- 1\nwhile (diff &gt; 1e-6){\n  y_new &lt;- 1 / x\n  diff &lt;- abs(y_old - y_new) / y_old\n  x &lt;- x + 1\n  y_old &lt;- y_new\n}"
  },
  {
    "objectID": "lectures/3aS25.html#example-2",
    "href": "lectures/3aS25.html#example-2",
    "title": "Control Flow 3",
    "section": "Example",
    "text": "Example\nSimulate from a \\(Binom(1,.2)\\) distribution until the sum of the random variables generated is 50.\n\n\nCode\nsum_bin &lt;- 0\nx &lt;- c()\nwhile (sum_bin &lt;51) {\n  x &lt;- c(x, rbinom(1, 1, 0.2))\n  sum_bin &lt;- sum(x)\n}\nsum_bin\nlength(x)"
  },
  {
    "objectID": "lectures/3aS25.html#example-3",
    "href": "lectures/3aS25.html#example-3",
    "title": "Control Flow 3",
    "section": "Example",
    "text": "Example\nGenerate the 10th row of Pascal’s Triangle.\n\n\nCode\ni &lt;- 2\nx &lt;- c(1, 1)\nwhile (i &lt; 11){\n  n &lt;- length(x) + 1\n  y &lt;- vector(length = n)\n  y[1] &lt;- 1\n  y[n] &lt;- 1\n  for (i in 2:(n-1)){\n    y[i] &lt;- x[i-1] + x[i]\n  }\n  x &lt;- y\n  i &lt;- i + 1\n}\nx"
  },
  {
    "objectID": "lectures/3aS25.html#example-4",
    "href": "lectures/3aS25.html#example-4",
    "title": "Control Flow 3",
    "section": "Example",
    "text": "Example\nGenerate the first 1000 prime numbers.\n\n\nCode\nx &lt;- 2\ny &lt;- 2\nN &lt;- 1\nwhile(N &lt; 1001){\n  y &lt;- y + 1\n  nn &lt;- length(which(y %% x == 0))\n  if (nn == 0){\n    x &lt;- c(x,y)\n  }\n  N &lt;- length(x)\n}\nx"
  },
  {
    "objectID": "lectures/1bS25.html#introduction-to-r",
    "href": "lectures/1bS25.html#introduction-to-r",
    "title": "R Basics",
    "section": "Introduction to R",
    "text": "Introduction to R"
  },
  {
    "objectID": "lectures/1bS25.html#r-packages",
    "href": "lectures/1bS25.html#r-packages",
    "title": "R Basics",
    "section": "R Packages",
    "text": "R Packages\n\nCore PackagesCourse PackagesMisc Packages\n\n\n\nTidyverse\ncsucistats\n\n\ninstall.packages('csucistats', \n  repos = c('https://inqs909.r-universe.dev', \n  'https://cloud.r-project.org'))\n\n\n\n\n\n\nISLR2\nleaps\ngam\ntree\n\n\n\ngbm\ne1071\nglmnet\ntorch\n\n\n\n\n\nRMarkdown\nQuarto\nextraInserts (GitHub Package)"
  },
  {
    "objectID": "lectures/1bS25.html#load-r-package",
    "href": "lectures/1bS25.html#load-r-package",
    "title": "R Basics",
    "section": "Load R Package",
    "text": "Load R Package\n\nlibrary(tidyverse)\nlibrary(torch)\n\n\nYou must load packages every new R Session"
  },
  {
    "objectID": "lectures/1bS25.html#r-as-a-calculator",
    "href": "lectures/1bS25.html#r-as-a-calculator",
    "title": "R Basics",
    "section": "R as a calculator",
    "text": "R as a calculator\nR can evaluate different expressions in the console tab.\nTry the following:\n\n\\(4(4+2)/34\\)\n\\(6^3\\)\n\\(3-1\\)\n\\(4+4/3+45(32*34-54)\\)"
  },
  {
    "objectID": "lectures/1bS25.html#r-calculator",
    "href": "lectures/1bS25.html#r-calculator",
    "title": "R Basics",
    "section": "R Calculator",
    "text": "R Calculator\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/1bS25.html#r-functions",
    "href": "lectures/1bS25.html#r-functions",
    "title": "R Basics",
    "section": "R Functions",
    "text": "R Functions\nR functions performs tasks to specific data values.\nEvaluate the following values in R:\n\n\\(\\sqrt{3}\\)\n\\(e^3\\)\n\\(\\ln(53)\\)\n\\(\\log(324)\\)\n\\(\\sin(3)\\)\n\\(\\sin(3\\pi)\\)"
  },
  {
    "objectID": "lectures/1bS25.html#r-functions-1",
    "href": "lectures/1bS25.html#r-functions-1",
    "title": "R Basics",
    "section": "R Functions",
    "text": "R Functions\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/1bS25.html#types-of-data",
    "href": "lectures/1bS25.html#types-of-data",
    "title": "R Basics",
    "section": "Types of Data",
    "text": "Types of Data\n\nNumeric\nCharacter\nLogical\nMissing\n\nEvaluate the following code:\n\nis.numeric(1)\nis.numeric(\"1\")\nis.numeric(T)\nis.numeric(NA)"
  },
  {
    "objectID": "lectures/1bS25.html#types-of-data-1",
    "href": "lectures/1bS25.html#types-of-data-1",
    "title": "R Basics",
    "section": "Types of Data",
    "text": "Types of Data\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/1bS25.html#types-of-objects",
    "href": "lectures/1bS25.html#types-of-objects",
    "title": "R Basics",
    "section": "Types of Objects",
    "text": "Types of Objects\nIn R, an object contains a set of data. The most common types are vectors and matrix.\nRun this code and print out the objects in the console:\n\nx &lt;- 3:34\ny &lt;- matrix(1:20, nrow = 4)"
  },
  {
    "objectID": "lectures/1bS25.html#types-of-objects-1",
    "href": "lectures/1bS25.html#types-of-objects-1",
    "title": "R Basics",
    "section": "Types of objects",
    "text": "Types of objects\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/1bS25.html#data-frames",
    "href": "lectures/1bS25.html#data-frames",
    "title": "R Basics",
    "section": "Data Frames",
    "text": "Data Frames\nData frames can be thought of as R’s version of a data set.\nPlay around with mtcars:\n\nmtcars \n\n#&gt;                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#&gt; Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#&gt; Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#&gt; Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#&gt; Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#&gt; Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#&gt; Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#&gt; Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n#&gt; Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n#&gt; Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n#&gt; Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n#&gt; Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n#&gt; Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n#&gt; Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n#&gt; Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n#&gt; Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n#&gt; Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n#&gt; Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n#&gt; Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n#&gt; Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n#&gt; AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n#&gt; Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n#&gt; Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n#&gt; Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n#&gt; Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n#&gt; Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n#&gt; Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n#&gt; Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n#&gt; Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n#&gt; Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"
  },
  {
    "objectID": "lectures/1bS25.html#lists",
    "href": "lectures/1bS25.html#lists",
    "title": "R Basics",
    "section": "Lists",
    "text": "Lists\nList can be thought as an extended vector, but each element is a different R object.\nTry playing with this R object:\n\nlist_one &lt;- list(mtcars, rep(0, 4),\n                 diag(rep(1, 3)))"
  },
  {
    "objectID": "lectures/1bS25.html#lists-1",
    "href": "lectures/1bS25.html#lists-1",
    "title": "R Basics",
    "section": "Lists",
    "text": "Lists\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/5aS25.html#learning-objectives",
    "href": "lectures/5aS25.html#learning-objectives",
    "title": "Data Manipulation",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nDirectories/R Projects\nReading/Writing Data\nMerging Data\ndplyr Functions"
  },
  {
    "objectID": "lectures/5aS25.html#scripting-style-guide",
    "href": "lectures/5aS25.html#scripting-style-guide",
    "title": "Data Manipulation",
    "section": "Scripting Style Guide",
    "text": "Scripting Style Guide\nTidyverse Style Guide"
  },
  {
    "objectID": "lectures/5aS25.html#directories",
    "href": "lectures/5aS25.html#directories",
    "title": "Data Manipulation",
    "section": "Directories",
    "text": "Directories\nDirectories is the file system located on your computer.\nA file path indicates the location of certain files relative to your main (home) folder."
  },
  {
    "objectID": "lectures/5aS25.html#working-directory",
    "href": "lectures/5aS25.html#working-directory",
    "title": "Data Manipulation",
    "section": "Working Directory",
    "text": "Working Directory\nThis is the folder where R will save and read all the files when the file path is not specified.\nTo get the current working directory:\n\ngetwd()\n\nTo set the working directory:\n\nsetwd(\"new_file_path\")"
  },
  {
    "objectID": "lectures/5aS25.html#r-projects",
    "href": "lectures/5aS25.html#r-projects",
    "title": "Data Manipulation",
    "section": "R Projects",
    "text": "R Projects\nR Projects are ways for RStudio to organize files together for specific"
  },
  {
    "objectID": "lectures/5aS25.html#read-data",
    "href": "lectures/5aS25.html#read-data",
    "title": "Data Manipulation",
    "section": "Read Data",
    "text": "Read Data\n\nEasiest way is to have RStudio do it for you\nUse Base R functions\nUse readr package for tabular/text files\nUse readxl package for excel files\nUse haven package to read SAS, SPSS, or Stata files."
  },
  {
    "objectID": "lectures/5aS25.html#example",
    "href": "lectures/5aS25.html#example",
    "title": "Data Manipulation",
    "section": "Example",
    "text": "Example\n\ndata1 &lt;- read_csv(\"files/data/data_3_1.csv\")\ndata2 &lt;- read_csv(\"/home/inqs/Repos/M408_S23/data/data_3_2.csv\")"
  },
  {
    "objectID": "lectures/5aS25.html#example-1",
    "href": "lectures/5aS25.html#example-1",
    "title": "Data Manipulation",
    "section": "Example",
    "text": "Example\nDownload the following zip file: data\nLoad data data_3_1.csv and data_3_2.csv."
  },
  {
    "objectID": "lectures/5aS25.html#example-2",
    "href": "lectures/5aS25.html#example-2",
    "title": "Data Manipulation",
    "section": "Example",
    "text": "Example\nLoad the following data: https://m408.inqs.info/files/data/data_3_3.csv"
  },
  {
    "objectID": "lectures/5aS25.html#write-data",
    "href": "lectures/5aS25.html#write-data",
    "title": "Data Manipulation",
    "section": "Write Data",
    "text": "Write Data\nSeveral functions that you can use to write functions from the readr and readxl.\nI recommend using the write_csv function and provide csv files."
  },
  {
    "objectID": "lectures/5aS25.html#rdata",
    "href": "lectures/5aS25.html#rdata",
    "title": "Data Manipulation",
    "section": "RData",
    "text": "RData\nRData is the data file specific for R.\nLoad Data\n\nload(\"data.RData\")\n\nWrite Data\n\nsave(RObject, file = \"data.RData\")"
  },
  {
    "objectID": "lectures/5aS25.html#join",
    "href": "lectures/5aS25.html#join",
    "title": "Data Manipulation",
    "section": "*_join()",
    "text": "*_join()\n\nThe *_join() functions are used to merge 2 data frames together."
  },
  {
    "objectID": "lectures/5aS25.html#example-3",
    "href": "lectures/5aS25.html#example-3",
    "title": "Data Manipulation",
    "section": "Example",
    "text": "Example\nMerge data sets data_3_1.csv and data_3_2.csv using the full_join()"
  },
  {
    "objectID": "lectures/5aS25.html#mutate",
    "href": "lectures/5aS25.html#mutate",
    "title": "Data Manipulation",
    "section": "mutate()",
    "text": "mutate()\n\nAdds a new variable to a data frame\nExample:\n\n\nmtcars %&gt;%\n  mutate(log_mpg = log(mpg)) %&gt;%\n  head()\n\n#&gt; mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n\n\n#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb  log_mpg\n#&gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 3.044522\n#&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 3.044522\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 3.126761\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 3.063391\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 2.928524\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 2.895912"
  },
  {
    "objectID": "lectures/5aS25.html#mutate-1",
    "href": "lectures/5aS25.html#mutate-1",
    "title": "Data Manipulation",
    "section": "mutate()",
    "text": "mutate()\n\nEach argument is a new variable added\nExample:\n\n\nmtcars %&gt;%\n  mutate(log_mpg = log(mpg), log_hp = log(hp)) %&gt;%\n  head()\n\n#&gt; mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n#&gt;         new variable 'log_hp' (double) with 22 unique values and 0% NA\n\n\n#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb  log_mpg\n#&gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 3.044522\n#&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 3.044522\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 3.126761\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 3.063391\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 2.928524\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 2.895912\n#&gt;                     log_hp\n#&gt; Mazda RX4         4.700480\n#&gt; Mazda RX4 Wag     4.700480\n#&gt; Datsun 710        4.532599\n#&gt; Hornet 4 Drive    4.700480\n#&gt; Hornet Sportabout 5.164786\n#&gt; Valiant           4.653960"
  },
  {
    "objectID": "lectures/5aS25.html#example-4",
    "href": "lectures/5aS25.html#example-4",
    "title": "Data Manipulation",
    "section": "Example",
    "text": "Example\nUsing the penguins dataset from palmerpenguins, create a new variable that is the ln of flipper_length_mm."
  },
  {
    "objectID": "lectures/5aS25.html#select",
    "href": "lectures/5aS25.html#select",
    "title": "Data Manipulation",
    "section": "select()",
    "text": "select()\n-This selects the variables to keep in the data frame\n-Example:\n\nmtcars %&gt;%\n  mutate(log_mpg = log(mpg), log_hp = log(hp)) %&gt;%\n  select(mpg, log_mpg, hp, log_hp) %&gt;%\n  head()\n\n#&gt; mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n#&gt;         new variable 'log_hp' (double) with 22 unique values and 0% NA\n#&gt; select: dropped 9 variables (cyl, disp, drat, wt, qsec, …)\n\n\n#&gt;                    mpg  log_mpg  hp   log_hp\n#&gt; Mazda RX4         21.0 3.044522 110 4.700480\n#&gt; Mazda RX4 Wag     21.0 3.044522 110 4.700480\n#&gt; Datsun 710        22.8 3.126761  93 4.532599\n#&gt; Hornet 4 Drive    21.4 3.063391 110 4.700480\n#&gt; Hornet Sportabout 18.7 2.928524 175 5.164786\n#&gt; Valiant           18.1 2.895912 105 4.653960"
  },
  {
    "objectID": "lectures/5aS25.html#example-5",
    "href": "lectures/5aS25.html#example-5",
    "title": "Data Manipulation",
    "section": "Example",
    "text": "Example\nUsing the penguins dataset from palmerpenguins, only select the variables that are continuous data points."
  },
  {
    "objectID": "lectures/5aS25.html#filter",
    "href": "lectures/5aS25.html#filter",
    "title": "Data Manipulation",
    "section": "filter()",
    "text": "filter()\n\nSelects observations that satisfy a condition\nExample:\n\n\nmtcars %&gt;%\n  mutate(log_mpg = log(mpg), log_hp = log(hp)) %&gt;%\n  select(mpg, log_mpg, hp, log_hp) %&gt;%\n  filter(log_hp &lt; 5) %&gt;%\n  head()\n\n#&gt; mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n#&gt;         new variable 'log_hp' (double) with 22 unique values and 0% NA\n#&gt; select: dropped 9 variables (cyl, disp, drat, wt, qsec, …)\n#&gt; filter: removed 15 rows (47%), 17 rows remaining\n\n\n#&gt;                 mpg  log_mpg  hp   log_hp\n#&gt; Mazda RX4      21.0 3.044522 110 4.700480\n#&gt; Mazda RX4 Wag  21.0 3.044522 110 4.700480\n#&gt; Datsun 710     22.8 3.126761  93 4.532599\n#&gt; Hornet 4 Drive 21.4 3.063391 110 4.700480\n#&gt; Valiant        18.1 2.895912 105 4.653960\n#&gt; Merc 240D      24.4 3.194583  62 4.127134"
  },
  {
    "objectID": "lectures/5aS25.html#example-6",
    "href": "lectures/5aS25.html#example-6",
    "title": "Data Manipulation",
    "section": "Example",
    "text": "Example\nUsing the penguins dataset from palmerpenguins, filter the data set to look at penguins that are a Gentoo species."
  },
  {
    "objectID": "lectures/5aS25.html#if_else",
    "href": "lectures/5aS25.html#if_else",
    "title": "Data Manipulation",
    "section": "if_else()",
    "text": "if_else()\n\nA function that provides T (1) if the condition is met and F (0) otherwise\nExample:\n\n\nmtcars %&gt;%\n  mutate(log_mpg = log(mpg), log_hp = log(hp)) %&gt;%\n  select(mpg, log_mpg, hp, log_hp) %&gt;%\n  filter(log_hp &lt; 5) %&gt;%\n  mutate(hilhp = if_else(log_hp &gt; mean(log_hp), 1, 0)) %&gt;%\n  head()\n\n#&gt; mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n#&gt;         new variable 'log_hp' (double) with 22 unique values and 0% NA\n#&gt; select: dropped 9 variables (cyl, disp, drat, wt, qsec, …)\n#&gt; filter: removed 15 rows (47%), 17 rows remaining\n#&gt; mutate: new variable 'hilhp' (double) with 2 unique values and 0% NA\n\n\n#&gt;                 mpg  log_mpg  hp   log_hp hilhp\n#&gt; Mazda RX4      21.0 3.044522 110 4.700480     1\n#&gt; Mazda RX4 Wag  21.0 3.044522 110 4.700480     1\n#&gt; Datsun 710     22.8 3.126761  93 4.532599     1\n#&gt; Hornet 4 Drive 21.4 3.063391 110 4.700480     1\n#&gt; Valiant        18.1 2.895912 105 4.653960     1\n#&gt; Merc 240D      24.4 3.194583  62 4.127134     0"
  },
  {
    "objectID": "lectures/5aS25.html#example-7",
    "href": "lectures/5aS25.html#example-7",
    "title": "Data Manipulation",
    "section": "Example",
    "text": "Example\nUsing the penguins dataset from palmerpenguins, create a new variable that dichotomizes a penguin if their bill is longer than the average bill_length_mm."
  },
  {
    "objectID": "lectures/5aS25.html#group_by",
    "href": "lectures/5aS25.html#group_by",
    "title": "Data Manipulation",
    "section": "group_by()",
    "text": "group_by()\n\nThis groups the data frame\nExample:\n\n\nmtcars %&gt;%\n  mutate(log_mpg = log(mpg), log_hp = log(hp)) %&gt;%\n  select(mpg, log_mpg, hp, log_hp) %&gt;%\n  filter(log_hp &lt; 5) %&gt;%\n  mutate(hilhp = if_else(log_hp &gt; mean(log_hp), 1, 0)) %&gt;%\n  group_by(hilhp) %&gt;%\n  head()\n\n#&gt; mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n#&gt;         new variable 'log_hp' (double) with 22 unique values and 0% NA\n#&gt; select: dropped 9 variables (cyl, disp, drat, wt, qsec, …)\n#&gt; filter: removed 15 rows (47%), 17 rows remaining\n#&gt; mutate: new variable 'hilhp' (double) with 2 unique values and 0% NA\n#&gt; group_by: one grouping variable (hilhp)\n\n\n#&gt; # A tibble: 6 × 5\n#&gt; # Groups:   hilhp [2]\n#&gt;     mpg log_mpg    hp log_hp hilhp\n#&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  21      3.04   110   4.70     1\n#&gt; 2  21      3.04   110   4.70     1\n#&gt; 3  22.8    3.13    93   4.53     1\n#&gt; 4  21.4    3.06   110   4.70     1\n#&gt; 5  18.1    2.90   105   4.65     1\n#&gt; 6  24.4    3.19    62   4.13     0"
  },
  {
    "objectID": "lectures/5aS25.html#example-8",
    "href": "lectures/5aS25.html#example-8",
    "title": "Data Manipulation",
    "section": "Example",
    "text": "Example\nUsing the penguins dataset from palmerpenguins, group by species and find the average ln flipper_length_mm"
  },
  {
    "objectID": "lectures/2bS25.html#learning-objectives",
    "href": "lectures/2bS25.html#learning-objectives",
    "title": "Control Flow 2",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nNested for Loops"
  },
  {
    "objectID": "lectures/2bS25.html#nested-for-loops-1",
    "href": "lectures/2bS25.html#nested-for-loops-1",
    "title": "Control Flow 2",
    "section": "Nested for Loops",
    "text": "Nested for Loops\nNested for loops are for loops within another for loop. You can stack these loops as much as needed. Just make sure the index is different for each loop. The general format for a loop goes as follow:\n\nfor (i in vector_1){\n  for (ii in vector_2){\n    perform task\n  }\n}"
  },
  {
    "objectID": "lectures/2bS25.html#example",
    "href": "lectures/2bS25.html#example",
    "title": "Control Flow 2",
    "section": "Example",
    "text": "Example\nWithout using the sd() function, compute the standard deviation for each column of the matrix:\n\nx &lt;- matrix(rnorm(1000), nrow = 10)\n\n\\[\ns^2 = \\frac{1}{n-1}\\sum^n_{i=1}(x_i-\\bar x)^2\n\\]"
  },
  {
    "objectID": "lectures/2bS25.html#example-1",
    "href": "lectures/2bS25.html#example-1",
    "title": "Control Flow 2",
    "section": "Example",
    "text": "Example\nThe median() function obtain the median value of a vector. Write code to obtain the median value for any vector.\n\nx &lt;- rnorm(500)\ny &lt;- rnorm(501)\nmedian(x)\nmedian(y)\n\nAnswer:\n\n\nCode\nwk &lt;- x \npos50 &lt;- (length(wk) + 1) / 2\nswk &lt;- sort(wk)\nif ((length(wk) %% 2) == 0) {\n  val &lt;- (swk[floor(pos50)] + swk[ceiling(pos50)]) / 2\n} else {\n  val &lt;- swk[pos50]\n}\nprint(val)\nmedian(wk)\n\nwk &lt;- y \npos50 &lt;- (length(wk) + 1) / 2\nswk &lt;- sort(wk)\nif ((length(wk) %% 2) == 0) {\n  val &lt;- (swk[floor(pos50)] + swk[ceiling(pos50)]) / 2\n} else {\n  val &lt;- swk[pos50]\n}\nprint(val)\nmedian(wk)"
  },
  {
    "objectID": "lectures/2bS25.html#example-2",
    "href": "lectures/2bS25.html#example-2",
    "title": "Control Flow 2",
    "section": "Example",
    "text": "Example\nUsing the code below:\n\nx &lt;- rnorm(5000)\n\nCreate a new vector containing all the positive values of x. The new vector should be less than 5000.\nAnswer:\n\n\nCode\nnn &lt;- length(x)\npos &lt;- c()\nfor (i in 1:nn){\n  if (x[i] &gt; 0) {\n    pos &lt;- c(pos, x[i])\n  }\n}\npos"
  },
  {
    "objectID": "lectures/2bS25.html#example-3",
    "href": "lectures/2bS25.html#example-3",
    "title": "Control Flow 2",
    "section": "Example",
    "text": "Example\nCreate a vector reporting the data type of each variable in ISLR2::BrainCancer\n\nlibrary(ISLR2)\nBrainCancer\n\nAnswer:\n\n\nCode\nnn &lt;- ncol(BrainCancer)\ny &lt;- c()\nfor (i in 1:nn){\n  y &lt;- c(y, class(BrainCancer[,i]))\n}"
  },
  {
    "objectID": "lectures/2bS25.html#example-4",
    "href": "lectures/2bS25.html#example-4",
    "title": "Control Flow 2",
    "section": "Example",
    "text": "Example\n\\[\nf(x,y) = x^2 + y^2 + \\ln(x+y)\n\\]\nFind all the values of \\(f(x,y)\\) for every combination of \\(x \\in \\{1, 8, 13, 25, 42, 67, 95\\}\\) and \\(y \\in \\{6, 12, 18, 52, 61, 79, 83\\}\\)\nStore values in a \\(7\\times 7\\) matrix.\nAnswer:\n\n\nCode\nx &lt;- c(1, 8, 13, 25, 42, 67, 95)\ny &lt;- c(6, 12, 18, 52, 61, 79, 83)\nres &lt;- matrix(nrow = 7, ncol = 7)\ncolnames(res) &lt;- as.character(x)\nrownames(res) &lt;- as.character(y)\n\nfor (i in 1:7){\n  for (ii in 1:7){\n    res[ii,i] &lt;- x[i]^2 + y[ii]^2 + log(x[i] + y[ii])\n  }\n}\nprint(res)"
  },
  {
    "objectID": "lectures/2bS25.html#example-5",
    "href": "lectures/2bS25.html#example-5",
    "title": "Control Flow 2",
    "section": "Example",
    "text": "Example\nFor each column in mtcars, take the mean for the even columns, and median for the odd columns. Store the values in a list containing 2 vectors.\nAnswer:\n\n\nCode\nx &lt;- c()\ny &lt;- c()\nnn &lt;- ncol(mtcars)\nfor (i in 1:nn){\n  if (i %% 2 == 0){\n    x &lt;- c(x, mean(mtcars[,i]))\n  } else {\n    y &lt;- c(y, median(mtcars[,i]))\n  }\n}\n\nxy &lt;- list(x,y)"
  },
  {
    "objectID": "files/test.html",
    "href": "files/test.html",
    "title": "Semester Project",
    "section": "",
    "text": "The best part of the semester: the awesome data-based group project!\n\nProject Instructions"
  },
  {
    "objectID": "files/r-scripts/test.html",
    "href": "files/r-scripts/test.html",
    "title": "test",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "files/r-scripts/test.html#r-markdown",
    "href": "files/r-scripts/test.html#r-markdown",
    "title": "test",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "files/r-scripts/test.html#including-plots",
    "href": "files/r-scripts/test.html#including-plots",
    "title": "test",
    "section": "Including Plots",
    "text": "Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot."
  },
  {
    "objectID": "hw/hw1.html",
    "href": "hw/hw1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Due 2/6/25 @ 11:59 PM\nYou must comment all your code to receive credit.\nSubmit the *.html file to canvas.\nFor all problems, you must use at least one for or while loop."
  },
  {
    "objectID": "hw/hw1.html#problem-1",
    "href": "hw/hw1.html#problem-1",
    "title": "Homework 1",
    "section": "Problem 1",
    "text": "Problem 1\nUsing the following code:\n\nx &lt;- matrix(rnorm(1500), nrow = 10)\n\nWrite the code to produce the output if you use the rowMeans() on the R object x."
  },
  {
    "objectID": "hw/hw1.html#problem-2",
    "href": "hw/hw1.html#problem-2",
    "title": "Homework 1",
    "section": "Problem 2",
    "text": "Problem 2\nUsing the following code:\n\ny &lt;- matrix(sample(1:400, 100, replace = T), nrow = 10)\n\nFind the median value for each column of the matrix y."
  },
  {
    "objectID": "hw/hw1.html#problem-3",
    "href": "hw/hw1.html#problem-3",
    "title": "Homework 1",
    "section": "Problem 3",
    "text": "Problem 3\nWrite the code that will generate the first 1000 numbers of the Fibonacci Sequence."
  },
  {
    "objectID": "hw/hw1.html#problem-4",
    "href": "hw/hw1.html#problem-4",
    "title": "Homework 1",
    "section": "Problem 4",
    "text": "Problem 4\nWrite a function for the following equation:\n\\[\nf(x, y, z) =\\left\\{\\begin{array}{cc}\nx^2+\\sqrt y & z  = 0 \\\\\nx^2+2x+3+ \\log(y) & z = 1\n\\end{array}\\right.\n\\]\nInclude any error messages if necessary."
  },
  {
    "objectID": "hw/hw1.html#problem-5",
    "href": "hw/hw1.html#problem-5",
    "title": "Homework 1",
    "section": "Problem 5",
    "text": "Problem 5\nCreate a function that will give you the first x Fibonacci numbers. You must use a for loop."
  },
  {
    "objectID": "hw/hw3S25.html",
    "href": "hw/hw3S25.html",
    "title": "Homework 3",
    "section": "",
    "text": "Due 2/25/24 @ 11:59 PM\nUse an RMD or QMD file to create the assignment.\nYou must comment all your code to receive credit.\nSubmit the *.html file to canvas."
  },
  {
    "objectID": "hw/hw3S25.html#problem-1",
    "href": "hw/hw3S25.html#problem-1",
    "title": "Homework 3",
    "section": "Problem 1",
    "text": "Problem 1\nUsing the vectors below, use sapply() to determine if the numbers are even or odd.\n\nx &lt;- 1:20"
  },
  {
    "objectID": "hw/hw3S25.html#problem-2",
    "href": "hw/hw3S25.html#problem-2",
    "title": "Homework 3",
    "section": "Problem 2",
    "text": "Problem 2\nEvaluate the following function:\n\\[\nk(j(i(h(g(f(x))))))\n\\]\n\n\\(f(x)=\\sin(x)\\)\n\\(g(x) = x^2 +5\\)\n\\(h(x) = \\exp{2x}\\)\n\\(i(x) = \\sin(\\pi x)\\)\n\\(j(x) = x^2 + 5\\)\n\\(k(x) = \\sqrt x\\)\n\nYou are not allowed to store values, but you may create and store functions."
  },
  {
    "objectID": "hw/hw3S25.html#problem-3",
    "href": "hw/hw3S25.html#problem-3",
    "title": "Homework 3",
    "section": "Problem 3",
    "text": "Problem 3\nFrom the penguins data set from palmerpenguins package, create a new variable indicating if the penguin’s flipper length (flipper_length_mm) is greater than the average flipper length. Afterwards, group by the new variable and find the mean body_mass_g."
  },
  {
    "objectID": "hw/hw3S25.html#problem-4",
    "href": "hw/hw3S25.html#problem-4",
    "title": "Homework 3",
    "section": "Problem 4",
    "text": "Problem 4\nFrom the penguins data set from palmerpenguins package, find the mean and standard deviation of flipper_length_mm by species."
  },
  {
    "objectID": "hw/hw3S25.html#problem-5",
    "href": "hw/hw3S25.html#problem-5",
    "title": "Homework 3",
    "section": "Problem 5",
    "text": "Problem 5\nUsing the vector random_dates generated from the code below:\n\n# Set the start and end dates\nstart_date &lt;- as.POSIXct(\"2022-01-01 00:00:00\")\nend_date &lt;- as.POSIXct(\"2022-12-31 23:59:59\")\n\n# Generate a vector of random dates and times between the start and end dates\nrandom_dates &lt;- as.POSIXct(runif(10, start_date, end_date), origin = \"1970-01-01\")\n\n# Print the vector of random dates and times\nrandom_dates\n\nUse sapply() to determine what day of the week (in words) does the date represent. Hint: Look at the wday function from lubridate."
  },
  {
    "objectID": "hw/hw2.html",
    "href": "hw/hw2.html",
    "title": "Homework 2",
    "section": "",
    "text": "Due 2/18/25 @ 11:59 PM\nUse an RMD M408 Template to create the assignment.\nYou must comment all your code to receive credit.\nSubmit the *.html file to canvas."
  },
  {
    "objectID": "hw/hw2.html#problem-1",
    "href": "hw/hw2.html#problem-1",
    "title": "Homework 2",
    "section": "Problem 1",
    "text": "Problem 1\nWrite a function that takes a vector as an input an returns a labeled list with the mean, median, and variance of the vector."
  },
  {
    "objectID": "hw/hw2.html#problem-2",
    "href": "hw/hw2.html#problem-2",
    "title": "Homework 2",
    "section": "Problem 2",
    "text": "Problem 2\nWrite a function for the following equation:\n\\[\nf(x, y, z) =\\left\\{\\begin{array}{cc}\nx^2+\\sqrt y & z  = 0 \\\\\nx^2+2x+3+ \\log(y) & z = 1\n\\end{array}\\right.\n\\]\nInclude any error messages if necessary."
  },
  {
    "objectID": "hw/hw2.html#problem-3",
    "href": "hw/hw2.html#problem-3",
    "title": "Homework 2",
    "section": "Problem 3",
    "text": "Problem 3\nCreate a function that will give you the first x Fibonacci numbers. You must use a for loop."
  },
  {
    "objectID": "hw/hw2.html#problem-4",
    "href": "hw/hw2.html#problem-4",
    "title": "Homework 2",
    "section": "Problem 4",
    "text": "Problem 4\nCreate a function that will randomly generate n numbers that are greater than x from a \\(Pois(\\lambda)\\)."
  },
  {
    "objectID": "files/r-scripts/template.html#problem-2",
    "href": "files/r-scripts/template.html#problem-2",
    "title": "Title",
    "section": "Problem 2",
    "text": "Problem 2"
  },
  {
    "objectID": "files/r-scripts/template.html#problem-3",
    "href": "files/r-scripts/template.html#problem-3",
    "title": "Title",
    "section": "Problem 3",
    "text": "Problem 3"
  },
  {
    "objectID": "files/Hw.html",
    "href": "files/Hw.html",
    "title": "HW 1",
    "section": "",
    "text": "This is easy"
  },
  {
    "objectID": "files/Hw.html#problem-1",
    "href": "files/Hw.html#problem-1",
    "title": "HW 1",
    "section": "",
    "text": "This is easy"
  },
  {
    "objectID": "files/Hw.html#problem-2",
    "href": "files/Hw.html#problem-2",
    "title": "HW 1",
    "section": "Problem 2",
    "text": "Problem 2\nThis is also easy"
  },
  {
    "objectID": "files/Hw.html#problem-3",
    "href": "files/Hw.html#problem-3",
    "title": "HW 1",
    "section": "Problem 3 —",
    "text": "Problem 3 —"
  },
  {
    "objectID": "hw.html",
    "href": "hw.html",
    "title": "Homework",
    "section": "",
    "text": "Homework 1\n\n\n\n\n\n\n\n\n\n\n\nJan 30, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nHomework 2\n\n\n\n\n\n\n\n\n\n\n\nFeb 12, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nHomework 3\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "lectures/4aS25.html#re-install",
    "href": "lectures/4aS25.html#re-install",
    "title": "*apply Functions",
    "section": "Re Install",
    "text": "Re Install\n\ncsucistats\n\n\ninstall.packages('csucistats', \n  repos = c('https://inqs909.r-universe.dev', \n  'https://cloud.r-project.org'))"
  },
  {
    "objectID": "lectures/4aS25.html#learning-objectives",
    "href": "lectures/4aS25.html#learning-objectives",
    "title": "*apply Functions",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\n*apply()\napply()\nlapply()\nsapply\nmapply()\ntapply()"
  },
  {
    "objectID": "lectures/4aS25.html#apply-1",
    "href": "lectures/4aS25.html#apply-1",
    "title": "*apply Functions",
    "section": "*apply()",
    "text": "*apply()\nThe *apply() functions are a set of functions that completes iterative tasks to each element of an R object."
  },
  {
    "objectID": "lectures/4aS25.html#apply-3",
    "href": "lectures/4aS25.html#apply-3",
    "title": "*apply Functions",
    "section": "apply()",
    "text": "apply()\nThe apply function returns a vector, array, or list of values by applying a function to the margins of an array. You will need to specify the following arguments:\n\nX: an array to be indexed and applied\nMARGIN: specifyng which index(es) to subset by\nFUN: function to be applied\n…: further arguments to be applied to FUN, must be labeled\n\n\napply(X, MARGIN, FUN, ...)"
  },
  {
    "objectID": "lectures/4aS25.html#example",
    "href": "lectures/4aS25.html#example",
    "title": "*apply Functions",
    "section": "Example",
    "text": "Example\nFind the standard deviation of all the columns of the following matrix:\n\nx &lt;- matrix(rnorm(1000), nrow = 10)"
  },
  {
    "objectID": "lectures/4aS25.html#example-1",
    "href": "lectures/4aS25.html#example-1",
    "title": "*apply Functions",
    "section": "Example",
    "text": "Example\nFind the \\(25th\\), \\(50th\\), and \\(75th\\) quartiles for each row of the following matrix:\n\nx &lt;- matrix(rnorm(1000), nrow = 20)"
  },
  {
    "objectID": "lectures/4aS25.html#lapply-1",
    "href": "lectures/4aS25.html#lapply-1",
    "title": "*apply Functions",
    "section": "lapply()",
    "text": "lapply()\nThe lapply function applies a function to all the elements of a vector or matrix, and it will return a list. You will need to specify the following arguments:\n\nX: object to be iterated\nFUN: a function to be applied\n…: further arguments to be passed along to FUN\n\n\nlapply(X, FUN, ...)"
  },
  {
    "objectID": "lectures/4aS25.html#example-2",
    "href": "lectures/4aS25.html#example-2",
    "title": "*apply Functions",
    "section": "Example",
    "text": "Example\nCreate a function that returns a labeled list for with the following values: mean, standard deviation, median, max, and min."
  },
  {
    "objectID": "lectures/4aS25.html#sapply-1",
    "href": "lectures/4aS25.html#sapply-1",
    "title": "*apply Functions",
    "section": "sapply()",
    "text": "sapply()\nThe sapply() function will apply a function to each element of a list or vector, and it will return a simplified object, vector, matrix, or array. The sapply() function uses 4 main arguments:\n\nX: a vector or list to be iterated\nFUN: a function to be applied\n…: arguments passed along to FUN, must be labeled\nsimplify: indicates how to simplify the function, defaults to n-dimensional array based on output\n\n\nsapply(X, FUN, ..., simplify = TRUE)"
  },
  {
    "objectID": "lectures/4aS25.html#example-3",
    "href": "lectures/4aS25.html#example-3",
    "title": "*apply Functions",
    "section": "Example",
    "text": "Example\nUsing the vector below, compute the length of each string using sapply and str_length() from tidyverse\n\nfruits &lt;- c(\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\")"
  },
  {
    "objectID": "lectures/4aS25.html#example-4",
    "href": "lectures/4aS25.html#example-4",
    "title": "*apply Functions",
    "section": "Example",
    "text": "Example\nUsing the list generated below, compute the mean of each element of the list using sapply.\n\n# Generate a list of 10 lists, each containing 5 random numbers\nlists &lt;- lapply(1:10, function(i) {\n  means &lt;- rpois(1, 3)\n  rnorm(5, means)\n})"
  },
  {
    "objectID": "lectures/4aS25.html#example-5",
    "href": "lectures/4aS25.html#example-5",
    "title": "*apply Functions",
    "section": "Example",
    "text": "Example\nUsing the vector below, use the sapply() to find \\(\\log(x)\\) for each value and return a matrix:\n\nnumbers &lt;- 4:400"
  },
  {
    "objectID": "lectures/4aS25.html#mapply-1",
    "href": "lectures/4aS25.html#mapply-1",
    "title": "*apply Functions",
    "section": "mapply()",
    "text": "mapply()\nThe mapply() is the multivariate function of sapply(). The mapply() function has 3 major arguments:\n\nFUN: function applied to data\n…: arguments to be iterated, must be labeled.\nMoreArgs: A list containing other arguments that are necessary to FUN\n\n\nmapply(FUN, ..., MoreArgs = NULL)"
  },
  {
    "objectID": "lectures/4aS25.html#example-6",
    "href": "lectures/4aS25.html#example-6",
    "title": "*apply Functions",
    "section": "Example",
    "text": "Example\nLet x and y be two vectors, shown below, represent the x and y coordinates of a point. Using mapply(), compute the the distance between the points and the origin.\n\nx &lt;- c(2, 3, 4, 5)\ny &lt;- c(4, 6, 8, 10)"
  },
  {
    "objectID": "lectures/4aS25.html#tapply-1",
    "href": "lectures/4aS25.html#tapply-1",
    "title": "*apply Functions",
    "section": "tapply()",
    "text": "tapply()\nThe tapply() function will apply function to a group of values based on and indexed lists. It takes 3 arguments:\n\nX: a vector that can split\nINDEX: the index list made up of factors\nFUN: the function that will be applied\n…: further arguments to be passed to FUN\n\n\ntapply(X, INDEX, FUN = NULL, ...)"
  },
  {
    "objectID": "lectures/4aS25.html#example-7",
    "href": "lectures/4aS25.html#example-7",
    "title": "*apply Functions",
    "section": "Example",
    "text": "Example\nUsing the penguins data set from the palmerpenguins package, compute the average bill_length_mm for each island."
  },
  {
    "objectID": "lectures/4aS25.html#example-8",
    "href": "lectures/4aS25.html#example-8",
    "title": "*apply Functions",
    "section": "Example",
    "text": "Example\nThe vectors below provide the heights of different trees in the sample. Compute the median for each type of tree.\n\nheights &lt;- c(70, 72, 68, 65, 80, 75, 60, 68, 90, 72)\nspecies &lt;- c(\"maple\", \"oak\", \"pine\", \"maple\", \"oak\", \"pine\", \"maple\", \"oak\", \"pine\", \"maple\")"
  },
  {
    "objectID": "lectures/3bS25.html#learning-objectives",
    "href": "lectures/3bS25.html#learning-objectives",
    "title": "Functions",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nBuilt-in Functions\nUser-built functions\nExtensions\n\nThere are several available functions in R to conduct specific statistical methods or tasks"
  },
  {
    "objectID": "lectures/3bS25.html#help-documentation",
    "href": "lectures/3bS25.html#help-documentation",
    "title": "Functions",
    "section": "Help Documentation",
    "text": "Help Documentation\n\n\n\n\n\n\n\nSection\nDescription\n\n\n\n\nDescription\nProvides a brief introduction of the function\n\n\nUsage\nProvides potential usage of the function\n\n\nArguments\nArguments that the function can take\n\n\nDetails\nAn in depth description of the function\n\n\nValue\nProvides information of the output produced by the function\n\n\nNotes\nAny need to know information about the function\n\n\nAuthors\nDevelopers of the function\n\n\nReferences\nReferences to the model and function\n\n\nSee Also\nProvide information of supporting functions\n\n\nExamples\nExamples of the function"
  },
  {
    "objectID": "lectures/3bS25.html#generic-functions",
    "href": "lectures/3bS25.html#generic-functions",
    "title": "Functions",
    "section": "Generic Functions",
    "text": "Generic Functions\nSeveral R objects have a known class attached to it. A specialized object designed to be read by generic functions, such as summary() and plot().\nFor example, the summary() is a generic for several types of functions: summary.aov(), summary.lm(), summary.glm(), and many more."
  },
  {
    "objectID": "lectures/3bS25.html#commonly-used-function",
    "href": "lectures/3bS25.html#commonly-used-function",
    "title": "Functions",
    "section": "Commonly-used Function",
    "text": "Commonly-used Function\n\n\n\nFunctions\nDescription\n\n\n\n\naov()\nFits an ANOVA Model\n\n\nlm()\nFits a linear model\n\n\nglm()\nFits a general linear model\n\n\nt.test()\nConducts a t-test"
  },
  {
    "objectID": "lectures/3bS25.html#user-built-functions-1",
    "href": "lectures/3bS25.html#user-built-functions-1",
    "title": "Functions",
    "section": "User-built functions",
    "text": "User-built functions\n\nFunctions created by the user for analysis\nNeeds to be ran once to the R environment\nWill be lost when R session is closed"
  },
  {
    "objectID": "lectures/3bS25.html#anatomy",
    "href": "lectures/3bS25.html#anatomy",
    "title": "Functions",
    "section": "Anatomy",
    "text": "Anatomy\n\nname_of_function &lt;- function(data_1, data_2 = NULL, \n                             argument_1, argument_2 = TRUE, argument_3 = NULL,\n                             ...){\n  # Conduct Task\n  # Conduct Task\n  output_object &lt;- Tasks\n  return(output_object)\n}\n\n\n\nfunction: used to construct the function\ndata1: first data argument that needs to supplied\ndata2: second data argument that does not need to be supplied\nargument1: first argument must be supplied to alter function\nargument2: second argument to alter function, set to TRUE\nargument3: third argument that does not need to be supplied\n…: additional arguments supplied to other functions"
  },
  {
    "objectID": "lectures/3bS25.html#example",
    "href": "lectures/3bS25.html#example",
    "title": "Functions",
    "section": "Example",
    "text": "Example\nCreate a function for\n\\[\ny = \\ln(x^2)\n\\]"
  },
  {
    "objectID": "lectures/3bS25.html#example-1",
    "href": "lectures/3bS25.html#example-1",
    "title": "Functions",
    "section": "Example",
    "text": "Example\nCreate a function for\n\\[\nf(x) = \\left\\{\\begin{array}{cc}\nx^3 & x&lt;0\\\\\nx^2 + 5 & \\mathrm{otherwise}\n\\end{array} \\right.\n\\]"
  },
  {
    "objectID": "lectures/3bS25.html#example-2",
    "href": "lectures/3bS25.html#example-2",
    "title": "Functions",
    "section": "Example",
    "text": "Example\nCreate a function for\n\\[\nf(x,y) = \\left\\{\\begin{array}{cc}\nx^3 e^y &  x&lt;0\\ \\\\\nx^2 + 5 + \\ln(y) & \\mathrm{otherwise}\n\\end{array} \\right.\n\\]"
  },
  {
    "objectID": "lectures/3bS25.html#example-3",
    "href": "lectures/3bS25.html#example-3",
    "title": "Functions",
    "section": "Example",
    "text": "Example\nCreate the function that allows your to compute the z-score of a specific value x using the sampling distribution from a set of data (y vector):\n\\[\nz =  \\frac{x-\\bar y}{\\sqrt{s^2_{y}/n_y}}\n\\]"
  },
  {
    "objectID": "lectures/3bS25.html#r-packages",
    "href": "lectures/3bS25.html#r-packages",
    "title": "Functions",
    "section": "R Packages",
    "text": "R Packages\nR Packages are used to utilize functions created from the community.\nInstallation\n\ninstall.packages(\"tidyverse\")\n\nLoading\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "lectures/3bS25.html#reticulate",
    "href": "lectures/3bS25.html#reticulate",
    "title": "Functions",
    "section": "Reticulate",
    "text": "Reticulate\nReticulate is an R package that allows you to utilize python within R."
  },
  {
    "objectID": "lectures/3bS25.html#rcpp",
    "href": "lectures/3bS25.html#rcpp",
    "title": "Functions",
    "section": "Rcpp",
    "text": "Rcpp\nRcpp is an R package that allows you to call C++ programs in R.\nWe will compare variance functions written in cpp, user-built R, and built-in R.\nRcpp code:\n\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n// [[Rcpp::export]]\ndouble var_cpp(NumericVector x){\nint n = x.length();\nNumericVector pre(n);\ndouble mean_x = mean(x);\nfor (int i=0; i&lt;n; ++i){\n   pre[i] = pow(x[i]-mean_x, 2);\n}\nint divisor = n - 1;\ndouble post = sum(pre) / divisor;\nreturn post;\n}\n\nR code:\n\nvar_r &lt;- function(x){\n  sum((x-mean(x))^2) / (length(x)-1)\n}\n\nBenchmark Analysis\n\nx &lt;- rnorm(50)\nbench::mark(\nvar_cpp(x),\nvar_r(x),\nvar(x)\n)\n\n#&gt; # A tibble: 3 × 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 var_cpp(x) 615.02ns    820ns  1078346.      448B    108. \n#&gt; 2 var_r(x)     1.72µs   2.09µs   416271.    23.7KB     83.3\n#&gt; 3 var(x)       2.25µs    2.5µs   394891.    15.3KB    119.\n\n\n\nvar\n\n#&gt; function (x, y = NULL, na.rm = FALSE, use) \n#&gt; {\n#&gt;     if (missing(use)) \n#&gt;         use &lt;- if (na.rm) \n#&gt;             \"na.or.complete\"\n#&gt;         else \"everything\"\n#&gt;     na.method &lt;- pmatch(use, c(\"all.obs\", \"complete.obs\", \"pairwise.complete.obs\", \n#&gt;         \"everything\", \"na.or.complete\"))\n#&gt;     if (is.na(na.method)) \n#&gt;         stop(\"invalid 'use' argument\")\n#&gt;     if (is.data.frame(x)) \n#&gt;         x &lt;- as.matrix(x)\n#&gt;     else if (!is.null(x)) \n#&gt;         stopifnot(is.atomic(x))\n#&gt;     if (is.data.frame(y)) \n#&gt;         y &lt;- as.matrix(y)\n#&gt;     else if (!is.null(y)) \n#&gt;         stopifnot(is.atomic(y))\n#&gt;     .Call(C_cov, x, y, na.method, FALSE)\n#&gt; }\n#&gt; &lt;bytecode: 0x113db10d8&gt;\n#&gt; &lt;environment: namespace:stats&gt;\n\n\nThis is an extremely advanced topic. Only do this if you need real speed and efficiency."
  },
  {
    "objectID": "lectures/3bS25.html#motivating-example",
    "href": "lectures/3bS25.html#motivating-example",
    "title": "Functions",
    "section": "Motivating Example",
    "text": "Motivating Example\n\\[\nf(x) = 2 x^3 - 20x -43\n\\]\n\n\nCode\nf &lt;- function(x) 2*x^3 - 20 * x - 43\nx &lt;- seq(-5,5, length.out = 100)\nplot(x, f(x), type = \"l\")\nabline(h=0)"
  },
  {
    "objectID": "lectures/3bS25.html#finding-the-root",
    "href": "lectures/3bS25.html#finding-the-root",
    "title": "Functions",
    "section": "Finding the Root",
    "text": "Finding the Root\n\n\nCode\nf &lt;- function(x) 2*x^3 - 20 * x - 43\nx &lt;- seq(-5,5, length.out = 100)\nuniroot(f, lower = -5, upper = 5)\n\n\n#&gt; $root\n#&gt; [1] 3.932792\n#&gt; \n#&gt; $f.root\n#&gt; [1] -2.30166e-05\n#&gt; \n#&gt; $iter\n#&gt; [1] 7\n#&gt; \n#&gt; $init.it\n#&gt; [1] NA\n#&gt; \n#&gt; $estim.prec\n#&gt; [1] 6.103516e-05"
  },
  {
    "objectID": "lectures/3bS25.html#bisection-method-1",
    "href": "lectures/3bS25.html#bisection-method-1",
    "title": "Functions",
    "section": "Bisection Method",
    "text": "Bisection Method\n\nBegin with an interval \\(a\\) and \\(b\\) and evaluate \\(f(a)\\) and \\(f(b)\\).\nIf \\(f(a)\\) and \\(f(b)\\) are opposite signs, calculate \\(c = \\frac{a+b}{2}\\) and \\(f(c)\\).\nIf \\(|f(c)|&lt;\\varepsilon\\), for a small \\(\\varepsilon\\), then stop the algorithm and \\(c\\) is the root.\nReplace \\((a,f(a))\\) or \\((b,f(b))\\) with \\((c, f(c))\\) so that the signs of \\(f( \\cdot )\\) is 0."
  },
  {
    "objectID": "lectures/3bS25.html#bisection-code",
    "href": "lectures/3bS25.html#bisection-code",
    "title": "Functions",
    "section": "Bisection Code",
    "text": "Bisection Code\n\n\nCode\nf &lt;- function(x){2*x^3 - 20 * x - 43}\naa &lt;- -5\nbb &lt;- 5\ndiff &lt;- 10\ni &lt;- 0\nwhile(diff &gt; 1e-6){\n  faa &lt;- f(aa)\n  cc &lt;- (aa + bb) / 2\n  fcc &lt;- f(cc)\n  if (faa &lt; 0 & fcc &gt; 0){\n    bb &lt;- cc\n  } else {\n    aa &lt;- cc\n  }\n  diff &lt;- abs(fcc)\n  i &lt;- i + 1\n}\ni\ncc\nfcc"
  },
  {
    "objectID": "lectures/6aS25.html#learning-outcomes",
    "href": "lectures/6aS25.html#learning-outcomes",
    "title": "Introduction to Statistical Learning",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nIntroduction to Statistical Learning\nClassification vs Regression\nSupervised vs Unsupervised Machine Learning\nModel Adequacy"
  },
  {
    "objectID": "lectures/6aS25.html#book",
    "href": "lectures/6aS25.html#book",
    "title": "Introduction to Statistical Learning",
    "section": "Book",
    "text": "Book"
  },
  {
    "objectID": "lectures/6aS25.html#introduction-to-statistical-learning-1",
    "href": "lectures/6aS25.html#introduction-to-statistical-learning-1",
    "title": "Introduction to Statistical Learning",
    "section": "Introduction to Statistical Learning",
    "text": "Introduction to Statistical Learning\nWhat is Statistical Learning?\n\nStatistical learning is the task of predicting an outcome of interest given a set of predictor variables."
  },
  {
    "objectID": "lectures/6aS25.html#motivating-example",
    "href": "lectures/6aS25.html#motivating-example",
    "title": "Introduction to Statistical Learning",
    "section": "Motivating Example",
    "text": "Motivating Example"
  },
  {
    "objectID": "lectures/6aS25.html#statistical-learning-model",
    "href": "lectures/6aS25.html#statistical-learning-model",
    "title": "Introduction to Statistical Learning",
    "section": "Statistical Learning Model",
    "text": "Statistical Learning Model\n\\[\nY = f(\\boldsymbol X) + \\varepsilon\n\\]\n\n\\(Y\\): Outcome variable\n\\(f(\\cdot)\\): systematic component explaining \\(Y\\)\n\\(\\boldsymbol X\\): vector of predictor variables\n\\(\\varepsilon\\): error term"
  },
  {
    "objectID": "lectures/6aS25.html#modeling-fcdot-parametric",
    "href": "lectures/6aS25.html#modeling-fcdot-parametric",
    "title": "Introduction to Statistical Learning",
    "section": "Modeling \\(f(\\cdot)\\): Parametric",
    "text": "Modeling \\(f(\\cdot)\\): Parametric\n\nLinear Models\nGeneralized Linear Models (GLM)"
  },
  {
    "objectID": "lectures/6aS25.html#modeling-fcdot-nonparametric",
    "href": "lectures/6aS25.html#modeling-fcdot-nonparametric",
    "title": "Introduction to Statistical Learning",
    "section": "Modeling \\(f(\\cdot)\\): Nonparametric",
    "text": "Modeling \\(f(\\cdot)\\): Nonparametric\n\nGeneralized Additive Models\nLocal-Linear Models\nSmoothing Splines"
  },
  {
    "objectID": "lectures/6aS25.html#prediction",
    "href": "lectures/6aS25.html#prediction",
    "title": "Introduction to Statistical Learning",
    "section": "Prediction",
    "text": "Prediction\n\nStatistical Learning is only concerned with an accurate \\(Y\\)\n\\(f(\\cdot)\\) is considered a black box\nWe will not know how \\(\\boldsymbol X\\) explains \\(Y\\)\nWe choose flexible (nonparametric) models"
  },
  {
    "objectID": "lectures/6aS25.html#model-interpretability",
    "href": "lectures/6aS25.html#model-interpretability",
    "title": "Introduction to Statistical Learning",
    "section": "Model Interpretability",
    "text": "Model Interpretability\n\nWith a focus on prediction, model interpretability declines\nWe will not know how changes in \\(\\boldsymbol X\\) will affect \\(Y\\)"
  },
  {
    "objectID": "lectures/6aS25.html#regression",
    "href": "lectures/6aS25.html#regression",
    "title": "Introduction to Statistical Learning",
    "section": "Regression",
    "text": "Regression\nRegression in statistical learning terms indicates predicting a continuous random variable.\n\nWhat are the methods that we learned to model continuous random variables?"
  },
  {
    "objectID": "lectures/6aS25.html#example",
    "href": "lectures/6aS25.html#example",
    "title": "Introduction to Statistical Learning",
    "section": "Example",
    "text": "Example\n\nScatter PlotRegressionGAMCombined"
  },
  {
    "objectID": "lectures/6aS25.html#classification",
    "href": "lectures/6aS25.html#classification",
    "title": "Introduction to Statistical Learning",
    "section": "Classification",
    "text": "Classification\nClassification in statistical learning terms indicates predicting a categorical random variable.\n\nWhat are the methods that we learned to model categorical random variables?"
  },
  {
    "objectID": "lectures/6aS25.html#example-1",
    "href": "lectures/6aS25.html#example-1",
    "title": "Introduction to Statistical Learning",
    "section": "Example",
    "text": "Example\n\nDataKNNSVM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#&gt;             iris_pred\n#&gt;              setosa versicolor virginica\n#&gt;   setosa         20          0         0\n#&gt;   versicolor      0         19         1\n#&gt;   virginica       0          0        20\n\n\n\n\n\n\n#&gt;             Actual\n#&gt; Predicted    setosa versicolor virginica\n#&gt;   setosa         50          0         0\n#&gt;   versicolor      0         48         2\n#&gt;   virginica       0          2        48"
  },
  {
    "objectID": "lectures/6aS25.html#machine-learning",
    "href": "lectures/6aS25.html#machine-learning",
    "title": "Introduction to Statistical Learning",
    "section": "Machine Learning",
    "text": "Machine Learning\nMachine learning is a set of methods used for predicting and classifying data. Several statistical methods are considered machine learning techniques.\n\nCommon Methods\n\nRegression\nMixed-Effects\nNonparametric Regression\nNeural Networks\nTree-based methods\nBayesian Methods"
  },
  {
    "objectID": "lectures/6aS25.html#training-data",
    "href": "lectures/6aS25.html#training-data",
    "title": "Introduction to Statistical Learning",
    "section": "Training Data",
    "text": "Training Data\nTraining Data is the data set used to construct a model."
  },
  {
    "objectID": "lectures/6aS25.html#supervised",
    "href": "lectures/6aS25.html#supervised",
    "title": "Introduction to Statistical Learning",
    "section": "Supervised",
    "text": "Supervised\nSupervised Machine Learning techniques are techniques where the training data contains the outcome."
  },
  {
    "objectID": "lectures/6aS25.html#unsupervised",
    "href": "lectures/6aS25.html#unsupervised",
    "title": "Introduction to Statistical Learning",
    "section": "Unsupervised",
    "text": "Unsupervised\nUnsupervised Machine Learning techniques are techniques where the training data does not contains the outcome."
  },
  {
    "objectID": "lectures/6aS25.html#quality-of-fit-regression",
    "href": "lectures/6aS25.html#quality-of-fit-regression",
    "title": "Introduction to Statistical Learning",
    "section": "Quality of Fit: Regression",
    "text": "Quality of Fit: Regression\n\\[\nMSE = \\frac{1}{n}\\sum^n_{i=1}\\{y_i - \\hat f(\\boldsymbol x_i)\\}^2\n\\]"
  },
  {
    "objectID": "lectures/6aS25.html#quality-of-fit-classification",
    "href": "lectures/6aS25.html#quality-of-fit-classification",
    "title": "Introduction to Statistical Learning",
    "section": "Quality of Fit: Classification",
    "text": "Quality of Fit: Classification\n\\[\nER = \\frac{1}{n}\\sum^n_{i=1}I(y_i \\ne \\hat y_i)\n\\]"
  },
  {
    "objectID": "lectures/6aS25.html#bias-variance-tradeoff",
    "href": "lectures/6aS25.html#bias-variance-tradeoff",
    "title": "Introduction to Statistical Learning",
    "section": "Bias-Variance Tradeoff",
    "text": "Bias-Variance Tradeoff"
  },
  {
    "objectID": "lectures/6aS25.html#bias-variance-tradeoff-1",
    "href": "lectures/6aS25.html#bias-variance-tradeoff-1",
    "title": "Introduction to Statistical Learning",
    "section": "Bias-Variance Tradeoff",
    "text": "Bias-Variance Tradeoff\n\\[\nE(MSE) = E\\left\\{y-\\hat f(x)\\right\\}^2 = Var\\left\\{\\hat f(x)\\right\\} + Bias\\left\\{\\hat f(x)\\right\\}^2\n\\]"
  },
  {
    "objectID": "lectures/6aS25.html#example-2",
    "href": "lectures/6aS25.html#example-2",
    "title": "Introduction to Statistical Learning",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "lectures/6aS25.html#using-a-line",
    "href": "lectures/6aS25.html#using-a-line",
    "title": "Introduction to Statistical Learning",
    "section": "Using a Line",
    "text": "Using a Line"
  },
  {
    "objectID": "lectures/6aS25.html#using-a-highly-fleible-model",
    "href": "lectures/6aS25.html#using-a-highly-fleible-model",
    "title": "Introduction to Statistical Learning",
    "section": "Using a Highly Fleible Model",
    "text": "Using a Highly Fleible Model"
  },
  {
    "objectID": "lectures/6aS25.html#semi-flexible",
    "href": "lectures/6aS25.html#semi-flexible",
    "title": "Introduction to Statistical Learning",
    "section": "Semi-Flexible",
    "text": "Semi-Flexible"
  },
  {
    "objectID": "lectures/6aS25.html#all",
    "href": "lectures/6aS25.html#all",
    "title": "Introduction to Statistical Learning",
    "section": "All",
    "text": "All\n\n\nCode\nx &lt;- runif(100, 0, 10)\ny &lt;- 3 * x^2 - 5*x + 3 + rnorm(100, sd = 15)\ndata.frame(x, y) |&gt;\n  ggplot(aes(x, y)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", \n              color = \"skyblue4\", fill = \"skyblue2\") +\n  stat_smooth(method = \"loess\", span = 0.075, \n              color = \"springgreen4\", fill = \"springgreen2\") +\n  stat_smooth(color = \"violetred\", fill = \"violet\") +\n  theme_bw()"
  },
  {
    "objectID": "lectures/2aS25.html#anouncements",
    "href": "lectures/2aS25.html#anouncements",
    "title": "Control Flow 1",
    "section": "Anouncements",
    "text": "Anouncements\nQuarto Template for HW\n\n\n\n\n\n\n\nSave this in an empty source quarto document:\n\n---\ntitle: \"Title\"\nauthor: \"Name Here\"\ndate: \"`r format(Sys.time(),'%m-%d-%Y')`\"\nformat: \n  html:\n    toc: true\n    toc-depth: 2\n    code-fold: true\n    code-tools: true\n    code-line-numbers: true\nknitr:\n  opts_chunk:\n    echo: true\n    message: false\n    warning: false\n    error: true\n    tidy: styler\n    R.options:\n      digits: 3\n      max.print: 100\n---\n\n## Problem 1\n\n## Problem 2\n\n## Problem 3\n\nGuides:\n\nQuarto\nStatistical Computing"
  },
  {
    "objectID": "lectures/2aS25.html#learning-objectives",
    "href": "lectures/2aS25.html#learning-objectives",
    "title": "Control Flow 1",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nControl Flow\nIndexing\nComparing Numbers\nif/else Statements\ntry()\nfor Statements"
  },
  {
    "objectID": "lectures/2aS25.html#control-flow",
    "href": "lectures/2aS25.html#control-flow",
    "title": "Control Flow 1",
    "section": "Control Flow",
    "text": "Control Flow\nThe order a computer will complete tasks.\nUsually incorporates statements and loops."
  },
  {
    "objectID": "lectures/2aS25.html#indexing-1",
    "href": "lectures/2aS25.html#indexing-1",
    "title": "Control Flow 1",
    "section": "Indexing",
    "text": "Indexing\nWithin an R object, you can access an element by indexing it.\nIndexing tells R which values to output."
  },
  {
    "objectID": "lectures/2aS25.html#vectors",
    "href": "lectures/2aS25.html#vectors",
    "title": "Control Flow 1",
    "section": "Vectors",
    "text": "Vectors\nA vector can be indexed by adding [] after the object’s name and specifying the number of each element.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/2aS25.html#matrices",
    "href": "lectures/2aS25.html#matrices",
    "title": "Control Flow 1",
    "section": "Matrices",
    "text": "Matrices\nA matrix can be indexed by adding [] after the object’s name and specifying the number of each element. Separate the values by commas for specific indexes.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/2aS25.html#data-frames",
    "href": "lectures/2aS25.html#data-frames",
    "title": "Control Flow 1",
    "section": "Data Frames",
    "text": "Data Frames\nData frames can be indexed using the $ operator and [].\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/2aS25.html#lists",
    "href": "lectures/2aS25.html#lists",
    "title": "Control Flow 1",
    "section": "Lists",
    "text": "Lists\nLists can be indexed using the [[]] for a specific element of a list.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/2aS25.html#comparing-numbers-1",
    "href": "lectures/2aS25.html#comparing-numbers-1",
    "title": "Control Flow 1",
    "section": "Comparing Numbers",
    "text": "Comparing Numbers\nYou can compare two numbers, or objects, that will result in a logical output."
  },
  {
    "objectID": "lectures/2aS25.html#comparing-numbers-operators",
    "href": "lectures/2aS25.html#comparing-numbers-operators",
    "title": "Control Flow 1",
    "section": "Comparing Numbers Operators",
    "text": "Comparing Numbers Operators\n\n\n\nOperator\nDescription\n\n\n\n\n&gt;\nGreater Than\n\n\n&lt;\nLess Than\n\n\n&gt;=\nGreater than or equal\n\n\n&lt;=\nLess than or equal\n\n\n==\nEquals\n\n\n!=\nNot Equals"
  },
  {
    "objectID": "lectures/2aS25.html#comparing-vectors",
    "href": "lectures/2aS25.html#comparing-vectors",
    "title": "Control Flow 1",
    "section": "Comparing Vectors",
    "text": "Comparing Vectors\nWhen you compare a number to a vector, it will result as a logical vector."
  },
  {
    "objectID": "lectures/2aS25.html#example",
    "href": "lectures/2aS25.html#example",
    "title": "Control Flow 1",
    "section": "Example",
    "text": "Example\nTry the following code and explain what is happening:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/2aS25.html#ifelse-statements-1",
    "href": "lectures/2aS25.html#ifelse-statements-1",
    "title": "Control Flow 1",
    "section": "if/else Statements",
    "text": "if/else Statements\nif/else statements are used to conduct specific tasks depending on the conditions"
  },
  {
    "objectID": "lectures/2aS25.html#if-statement",
    "href": "lectures/2aS25.html#if-statement",
    "title": "Control Flow 1",
    "section": "if Statement",
    "text": "if Statement\nAn if statement is used to if you want R to perform a specific function if a certain condition is met. An if statement will only run a task if a logical is returned. You will need type if, followed by the condition (as a logical) in parentheses, then the task."
  },
  {
    "objectID": "lectures/2aS25.html#example-1",
    "href": "lectures/2aS25.html#example-1",
    "title": "Control Flow 1",
    "section": "Example",
    "text": "Example\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/2aS25.html#else-statement",
    "href": "lectures/2aS25.html#else-statement",
    "title": "Control Flow 1",
    "section": "else statement",
    "text": "else statement\nAn else statement will conduct a different task if the if statement does not conduct the tasks."
  },
  {
    "objectID": "lectures/2aS25.html#example-2",
    "href": "lectures/2aS25.html#example-2",
    "title": "Control Flow 1",
    "section": "Example",
    "text": "Example\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/2aS25.html#chain-ifelse-statement",
    "href": "lectures/2aS25.html#chain-ifelse-statement",
    "title": "Control Flow 1",
    "section": "Chain if/else statement",
    "text": "Chain if/else statement\nIf you have more than two options, you can chain if/else statements by adding an if statement immediately after the word else."
  },
  {
    "objectID": "lectures/2aS25.html#example-3",
    "href": "lectures/2aS25.html#example-3",
    "title": "Control Flow 1",
    "section": "Example",
    "text": "Example\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/2aS25.html#try-1",
    "href": "lectures/2aS25.html#try-1",
    "title": "Control Flow 1",
    "section": "try()",
    "text": "try()\nThe try() is an extremely powerful function that will prevent a code from stopping if an error occurs."
  },
  {
    "objectID": "lectures/2aS25.html#example-4",
    "href": "lectures/2aS25.html#example-4",
    "title": "Control Flow 1",
    "section": "Example",
    "text": "Example\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/2aS25.html#for-loops-1",
    "href": "lectures/2aS25.html#for-loops-1",
    "title": "Control Flow 1",
    "section": "for Loops",
    "text": "for Loops\nfor loops are used to conduct an iterative task with slight changes to the input. The general format goes as follows:\n\nfor (index in vector){\n  Conduct task\n}\n\nYou will repeat the for loop untie all the elements in the vector have been used."
  },
  {
    "objectID": "lectures/2aS25.html#example-5",
    "href": "lectures/2aS25.html#example-5",
    "title": "Control Flow 1",
    "section": "Example",
    "text": "Example\nCompute the mean:\n\\[\n\\bar x = \\frac{1}{n}\\sum^n_{i=1}x_i\n\\]\n\nx &lt;- rnorm(100)\nmean(x)\n\n#&gt; [1] -0.08124951"
  },
  {
    "objectID": "lectures/2aS25.html#example-6",
    "href": "lectures/2aS25.html#example-6",
    "title": "Control Flow 1",
    "section": "Example",
    "text": "Example\nCompute the variance:\n\\[\ns^2 = \\frac{1}{n-1}\\sum^n_{i-1}(x_i-\\bar x)^2\n\\]\n\nx &lt;- rnorm(100)\nvar(x)\n\n#&gt; [1] 1.229341"
  },
  {
    "objectID": "Project.html",
    "href": "Project.html",
    "title": "Semester Project",
    "section": "",
    "text": "The best part of the semester: the awesome data-based group project!"
  },
  {
    "objectID": "Project.html#group-formation",
    "href": "Project.html#group-formation",
    "title": "Semester Project",
    "section": "Group Formation",
    "text": "Group Formation\nYou will work in a group of (approximately) three students. You may choose your own groups, or I would be happy to assign you to a group. The best groups will have team members with similar interests as far as application areas (e.g., biology, economics, etc.) but differing abilities and interests in terms of computational statistics (e.g., a stronger programmer combined with a visualization designer combined with a domain knowledge expert)."
  },
  {
    "objectID": "Project.html#assignment",
    "href": "Project.html#assignment",
    "title": "Semester Project",
    "section": "Assignment",
    "text": "Assignment\nYour task is to use data to tell us something interesting. This project is deliberately open-ended to allow you to fully explore your creativity. There are three main rules that must be followed:\n\nYour project must be centered around data. Preferably, you will work with large, complex, and/or messy data. The more challenging your data set is, the better. Two things that will make your project more ambitious (and more interesting) are:\n\n\nCombining two or more data sets that are not obviously related. For example, in the tweets predicting elections paper from the first day of class, the researchers had to combine data from Twitter that had nothing to do with politics with a data set of congressional districts, and both data sets had to be spatially-aware, since the merging was done according to the geographical location of the tweet.\nAccessing a live data stream. There are many APIs on the Internet that allow you to access data that changes on a continual basis. This is in contrast to static data that was collected at some point in time and does not change. If your project can respond dynamically to a live data stream, then this will make it more interesting.\n\nPlease note that neither of the above stipulations are requirements – they are merely examples of two considerations that may make your data more challenging to work with – and thus your project more ambitious.\n\nYour project must tell us something. We’ve seen a range of projects / analyses over the course of the semester. On one extreme are visualization projects (like Snow’s cholera map) that involve virtually no statistical analysis. On the other extreme are data mining projects like the KDD cup or Kaggle competitions, which involve very little visualization. Your project can be anywhere on this spectrum, but expectations may be different depending on where you are on the scale. An example of a project that doesn’t tell us anything, would be something that downloads a single data source and summarizes it, with some perfunctory visualization. Make sure that your project is thought-provoking and has some underlying meaning!\nTo get an A+, you must show something beyond what we’ve done in class. Some examples: Use a new data mining technique (e.g., an artificial neural network, näive Bayes classifier – only if the technique is a new idea for you!) Use a new programming technology (e.g., Python, MapReduce, shell scripting… should be new to you!)\n\n\nUse a new visualization technology (e.g., Inkscape, Illustrator, Shiny, Processing)\nUse a new live data source or API (e.g., Flickr, Facebook, CoinMarketCap) [Note: just downloading a new data set in a flat file does not count!]\nUse a new data format (e.g., XML, HDF5, JSON)\nCompare two datasets (e.g., La Quinta vs. Dennys!)\n\nAlso, domain knowledge does not count here, so your outside knowledge of protein folding makes for a great motivation, but it doesn’t count as something extra.\n\nAt some point in the project, you should give an analysis/discussion of where the data came from and what/who it represents.\nLast, you must address any ethical considerations that came about during the project. How were you or weren’t you able to address the ethical issues that came up?\n\nIn addition to the examples you have seen over the course of the semester (and previous project links given at the bottom of this page), here are some generic ideas for projects:\n\nCompete (strongly) in a past KDD cup or Kaggle competition.\nCreate a GoogleMaps mash-up\nWrite an R package that provides an API to an online data set\nCreate a Shiny application that helps a CI professor analyze their data\n\n\nGeneral Rules\nYou may discuss your project with other students, but each group will have a different topic, so there is a limit to how much you can help each other. You may consult other sources, and you should credit all sources in your report. Feel free to consult with me or your mentors."
  },
  {
    "objectID": "Project.html#components",
    "href": "Project.html#components",
    "title": "Semester Project",
    "section": "Components",
    "text": "Components\n\nProposals\nYour initial proposal (via Canvas) is due by midnight on Friday, March 14th. The final proposal (via GitHub project site) will be due three weeks later on April 4th.\nPrior to writing your initial proposal you should get together with your group-mates and brainstorm a half dozen or so ideas before coalescing around one idea. Be ambitious! Once you decide on a topic that interests you, think about what you would like to end up with as a final result – without worrying about how to get there. Try to visualize what your end product will look like. Will it be an interactive map? A predictive model? A mobile application? Don’t think about coding, or a particular data set, or what you know how to do now. If you come up with something ambitious and original, you’ll be more motivated to learn new things as you go in order to accomplish your goal.\nThe topic is completely open to your choice, but keep in mind the three main rules listed above. Try to think about how you will satisfy the criteria.\n\nContent\nYour initial (via Canvas) and revised (via GitHub) proposals should contain the following content:\nGroup Members: List the members of your group. For the revised proposal, add additional information about each person’s role. Each member of the group should have two jobs: (1) a group dynamic role, (2) a project role. See Group Roles for more information on allocating tasks.\nTitle: The title of your project\nPurpose: Describe the general topic/phenomenon you want to explore, as well some carefully considered questions that you hope to address. You should make an argument motivating your work. Why should someone be interested in what you are doing? What do you hope people will learn from your project?\nData: As best you can, describe where you will find your data, and what kind of data it is. Will you be working with spatial data in shapefiles? Do the data come from json files? Will you be accessing an API to a live data source? Be as specific as you can, listing URLs and file formats if possible.\nVariables: As much as possible, list, and briefly describe, each variable that you plan to incorporate. If you can, be specific about units, scale, etc.\nEnd Product: Describe what you hope to deliver as a final product. Will it be a Shiny application that will be posted on the Internet? Will it be a GoogleMaps mash-up? Will it be a package that provides an API to a live data source (e.g., twitteR)? Will it be a method that draws some statistical conclusions? Will it be a predictive model that forecasts future values of some quantity?\n\n\n\nUpdate\nPlease respond to the following three questions (posted to your GitHub repo) by the end of the day Friday, April 18th.\n\nHave you already collected, or do you have access to, all of the data that you will need in order to complete your project? If not, please estimate the percentage of the data that you have, describe any issues that you are having, and what your plan is for getting the rest of the data.\nWhat is the single biggest unresolved issue you are having? Please describe it briefly, and what your plan is for resolving this issue.\nWhat are the elements from outside of the course, if any, that you plan to incorporate into your project?\n\n\n\nPresentation\nAn effective oral presentation is an integral part of this project. One of the objectives of this class is to give you experience conveying the results of a technical investigation to a non-technical audience in a way that they can understand. Whether you choose to stay in academia or pursue a career in industry, the ability to communicate clearly is of paramount importance. As a statistician (data scientist, software engineer, etc.), the burden of proof is on you to convince your audience that what you are saying is true. If your audience (who may very well be less knowledgeable about statistics than you are) cannot understand your results or their interpretations, then the technical merit of your project is irrelevant.\nOn Thursday, May 8th, your group will make a 10-12 minute oral presentation to the class. You should make (good) slides. Your goal should be to convey to your audience a clear understanding of your research topic, along with a basic understanding of your project, and how well it addresses the research question you posed. You should not tell us everything that you did, or show a bunch of things that you tried that didn’t work well. After hearing your talk, each student in the class should be able to answer:\n\nWhat was your project about?\nWhat format was the original data in, and what [downloading, data wrangling, data analysis] techniques did you apply to it?\nWhat were your findings? You should prepare electronic slides for your talk. PowerPoint is fine, but you might also want to consider Quarto slides (Quarto presentations, ioslides, Slidy, or reveal.js), Google Presentation, Beamer (LaTeX), or alternative, non-linear presentation software like Prezi. Use your creativity! One thing you should not do is walk us through your calculations in R Studio. If your project has any interactive elements, please demonstrate them for us!\n\nYou will need to email me and submit your slides to GitHub before your presentation, and as a back-up ideally the presentation will also live in the cloud somewhere. You should plan to not hook up your laptop to the computer in Estella 2141 (unless you have good reason and have spoken to me about it beforehand).\n\nAdvice\nThere are many sources of advice for how to make a good presentation, but an excellent place to start is a project called Technically Speaking.\nWatch the videos on this site to identify some common mistakes. Here is some general advice:\n\nBudget your time. You only have ~10 minutes, and we will be running a tight schedule. Plan for 8-10 minutes to talk, and 2 minutes to answer questions. If your talk runs too short or too long, it makes you seem unprepared. Rehearse your talk ahead of time (with your group) several times in order to get a better feel for your timing. Note also that you may have a tendency to talk faster during your actual talk than you will during your rehearsal. Talking faster in order to speed up is not a good strategy – you are much better off simply cutting material ahead of time.\nDon’t write too much on each slide. You don’t want people to have to read your slides, because if the audience is reading your slides, then they aren’t listening to you. You want your slides to provide visual cues to the points that you are making – not substitute for your spoken words. Concentrate on graphical displays and bullet-pointed lists of ideas (not sentences).\nPut your problem in context. Remember that most of your audience will have little or no knowledge of your subject matter. The easiest way to lose people is to dive right into technical details that require prior domain knowledge. Spend a few minutes at the beginning of your talk introducing your audience to the most basic aspects of your topic and present some motivation for what you are studying.\nSpeak loudly and clearly. Remember that you know more about your topic that anyone else in the room, so speak and act with confidence!\nTell a story – not necessarily the whole story. It is unrealistic to expect that you can tell your audience everything that you know about your topic in 10 minutes. You should strive to convey the big ideas in a clear fashion, but not dwell on the details. Your talk will be successful if your audience is able to walk away with an understanding of what your research question was, how you addressed it, and what the implications of your findings are.\n\n\n\n\nWrite-Up\nYour write-up will be similar to a report to client crafted in Quarto, compiled to a pdf, due on Thursday, May 15th by midnight.\nIn your write-up, you should tell a data science audience about your project, why they should care about it, and what you have discovered. Your audience will be people like you – current or aspiring data scientists. Keep in mind that this audience is extraordinarily diverse in terms of skills and abilities, so you should assume very little about what they might know. However, your audience is reasonably tech-savvy, so you need not “dumb-down” your analysis.\nNote that ideally, you would be able to use the write-up to show a future employer or graduate school an example of something interesting which you have produced.\n\nContent\nYou do not need to present all of the R code that you wrote throughout the process of working on this project. However, the write-up should contain the minimal set of R code that is necessary to understand your results and findings. If you make a claim, it must be justified by explicit calculation. A knowledgeable reviewer should be able to compile your .qmd file without modification (caveat: unless you also did work outside of R), and verify every statement that you have made. All of the R code necessary to produce your figures and tables must appear in the .qmd version of the write-up. All of the R code necessary to understand your work should appear in the .pdf version of the write-up.\nAny data you use should either be obtained dynamically (e.g., from a website) or saved into your project repository (unless the dataset is too big, and we’ve already discussed that the data are hosted locally).\n\n\nMotivation\nBe sure to motivate your topic at the beginning of your write-up. You should try to hook the reader early on. Assume that your audience is a skeptical data scientist who has stumbled across your write-up but has very little time to read it. Can you give her a reason to continue reading? A cool visualization or result can help.\n\n\nFormat\nYou don’t need to follow a specific format in the write-up, but you should start with an introductory paragraph and finish with a conclusion. The paragraphs needs not follow the formal writing style that you would use in most other classes. Here, a colloquial style that is accessible to a lay reader is appropriate.\nNevertheless, your write-up should address the following questions:\n\nWhy should anyone care about this?\nWhat is the project about? Do not assume that your readers have any domain knowledge! The burden of explanation as to what you are talking about is on you! For example, if your project involves phylogenetic trees, do not assume that your audience has anything other than a basic, lay understanding of genetics.\nWhere did your data come from? What kind of data was it? Is there a link to the data or some other way for the reader to follow up on your work? Be sure to cite / reference where your data came from!!\nWhat are your findings? What kind of statistical computations (if any) have you done to support those conclusions? Again, while the R code will show how the calculation was performed, it is up to you to interpret, in English sentences, the results of these calculations. Do not forget about units, axis labels, etc.\nWhat are the limitations of your work? Be clear so that others do not misinterpret your findings. To what population do your results apply? Do they generalize? Could your work be extended with more data or computational power or time to analyze? How could your study be improved? Suggesting plausible extensions don’t weaken your work – they strengthen it by connecting it to future work.\nWhat ethical considerations came about during the project? How were you or weren’t you able to address those issues? What did you learn beyond what we’ve covered in class? ##Style The notebook (i.e., qmd + pdf) format is designed to be an interactive document. Take advantage of this by including hyperlinks, figures, videos, etc. to provide context for the reader. It is likely that you will include references section or a bibliography, and your references should be embedded via links. Use Quarto elements like links, lists, LaTeX, and images as needed.\n\nVisualizations, particularly interactive ones, will be well-received. That said, do not overuse visualizations. You may be better off with one complicated but well-crafted visualization as opposed to many quick-and-dirty plots. Do not forget Tufte! Any plots should be well-thought out, properly labelled, informative, and visually appealing!\nThe R code is there to support the technical reader who wishes to dig into your work – not to substitute for written explanation. Do not present long unbroken chunks of R code without offering written explanations. It is rarely necessary to have more than three or four lines of R code in a single chunk. Feel free to echo=FALSE any code which is not relevant to the story you are telling.\n\n\nCiting\nSources As you know, you should cite all references that you use. This includes (among other things) research articles, important information (e.g., “7% of NHL players are non-white”), R packages, other (e.g., Python) packages, and relevant algorithms (e.g., NRC Word-Emotion Association Lexicon). You may use any formatting for the citations as long as the citations are consistent, standard usage, and contain all relevant information for your reader to find the appropriate documentation.\nThe information you need to cite any R package is given by the R command citation(). For example:\n\ncitation(\"dplyr\")\n\nTo cite package 'dplyr' in publications use:\n\n  Wickham H, François R, Henry L, Müller K, Vaughan D (2023). _dplyr: A\n  Grammar of Data Manipulation_. R package version 1.1.2,\n  &lt;https://CRAN.R-project.org/package=dplyr&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {dplyr: A Grammar of Data Manipulation},\n    author = {Hadley Wickham and Romain François and Lionel Henry and Kirill Müller and Davis Vaughan},\n    year = {2023},\n    note = {R package version 1.1.2},\n    url = {https://CRAN.R-project.org/package=dplyr},\n  }"
  },
  {
    "objectID": "Project.html#assessment-criteria",
    "href": "Project.html#assessment-criteria",
    "title": "Semester Project",
    "section": "Assessment Criteria",
    "text": "Assessment Criteria\nYour project will be evaluated based on the following criteria:\nOriginality/Interest: Is the topic original, interesting, and substantial – or is it trite, pedantic, and trivial? How much creativity, initiative, and ambition did the group demonstrate? Is the basic question driving the project worth investigating, or is it obviously answerable without a data-based study?\nDegree of Difficulty: How challenging was the project? Were the data particularly large, complex, and/or messy? Did the data come in an obscure format? Was a scraper or API necessary to acquire the data? Was a challenging visualization or applet constructed? Were any elements from outside the coursework necessary to complete the project?\nDesign: How well were the graphical elements of the project designed? Were they clunky or elegant? Was a truly original view of the data presented? Were any interactive elements usable?\nMeaning/Analysis: Did we learn anything meaningful from this project? Are the chosen analyses appropriate for the variables/relationships under investigation, and are the assumptions underlying these analyses met? Are the analyses carried out correctly? Did the group make appropriate conclusions from the analyses, and are these conclusions justified?\nWrite-Up: How effectively does the write-up communicate the goals, procedures, and results of the study? Are the claims adequately supported? Does the writing style enhance what the group is trying to communicate? How well is it edited? Are the statistical claims justified? Are text and analyses effectively interwoven? Clear writing, correct spelling, and good grammar are important.\nOral Presentation: How effectively does the oral presentation communicate the goals, procedures, and results of the study? Do the slides help to illustrate the points being made by the speaker without distracting the audience? Do the presenters seem to be well-rehearsed? Did they properly budget their time? Do they appear to be confident in what they are saying? Are her arguments persuasive?"
  },
  {
    "objectID": "Project.html#presentation-evaluation",
    "href": "Project.html#presentation-evaluation",
    "title": "Semester Project",
    "section": "Presentation Evaluation",
    "text": "Presentation Evaluation\nThe presentation will be evaluated by keeping the following in mind:\n\nMastery of the material (understanding of the material is strong and well communicated)\nBackground, completeness (thoroughly explains all key points)\nPresentation evaluation (organized, communicates effectively with the audience)"
  }
]